{
  "dataType": "CVE_RECORD",
  "containers": {
    "adp": [
      {
        "title": "CISA ADP Vulnrichment",
        "metrics": [
          {
            "other": {
              "type": "ssvc",
              "content": {
                "id": "CVE-2024-43414",
                "role": "CISA Coordinator",
                "options": [
                  {
                    "Exploitation": "none"
                  },
                  {
                    "Automatable": "yes"
                  },
                  {
                    "Technical Impact": "partial"
                  }
                ],
                "version": "2.0.3",
                "timestamp": "2024-08-27T17:55:12.961543Z"
              }
            }
          }
        ],
        "affected": [
          {
            "cpes": [
              "cpe:2.3:a:apollographql:federation:*:*:*:*:*:*:*:*"
            ],
            "vendor": "apollographql",
            "product": "federation",
            "versions": [
              {
                "status": "affected",
                "version": "2.0.0",
                "lessThan": "2.8.5",
                "versionType": "custom"
              },
              {
                "status": "affected",
                "version": "0",
                "lessThan": "1.52.1",
                "versionType": "custom"
              }
            ],
            "defaultStatus": "unknown"
          }
        ],
        "providerMetadata": {
          "orgId": "134c704f-9b21-4f2e-91b3-4a467353bcc0",
          "shortName": "CISA-ADP",
          "dateUpdated": "2024-08-27T17:58:27.716Z"
        }
      }
    ],
    "cna": {
      "title": "Apollo Query Planner and Apollo Gateway may infinitely loop on sufficiently complex queries",
      "source": {
        "advisory": "GHSA-fmj9-77q8-g6c4",
        "discovery": "UNKNOWN"
      },
      "metrics": [
        {
          "cvssV3_1": {
            "scope": "UNCHANGED",
            "version": "3.1",
            "baseScore": 7.5,
            "attackVector": "NETWORK",
            "baseSeverity": "HIGH",
            "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "integrityImpact": "NONE",
            "userInteraction": "NONE",
            "attackComplexity": "LOW",
            "availabilityImpact": "HIGH",
            "privilegesRequired": "NONE",
            "confidentialityImpact": "NONE"
          }
        }
      ],
      "affected": [
        {
          "vendor": "apollographql",
          "product": "federation",
          "versions": [
            {
              "status": "affected",
              "version": ">= 2.0.0, < 2.8.5"
            },
            {
              "status": "affected",
              "version": "< 1.52.1"
            }
          ]
        }
      ],
      "references": [
        {
          "url": "https://github.com/apollographql/federation/security/advisories/GHSA-fmj9-77q8-g6c4",
          "name": "https://github.com/apollographql/federation/security/advisories/GHSA-fmj9-77q8-g6c4",
          "tags": [
            "x_refsource_CONFIRM"
          ]
        },
        {
          "url": "https://www.apollographql.com/docs/federation/query-plans",
          "name": "https://www.apollographql.com/docs/federation/query-plans",
          "tags": [
            "x_refsource_MISC"
          ]
        },
        {
          "url": "https://www.apollographql.com/docs/router/configuration/persisted-queries",
          "name": "https://www.apollographql.com/docs/router/configuration/persisted-queries",
          "tags": [
            "x_refsource_MISC"
          ]
        }
      ],
      "descriptions": [
        {
          "lang": "en",
          "value": "Apollo Federation is an architecture for declaratively composing APIs into a unified graph. Each team can own their slice of the graph independently, empowering them to deliver autonomously and incrementally. Instances of @apollo/query-planner >=2.0.0 and <2.8.5 are impacted by a denial-of-service vulnerability. @apollo/gateway versions >=2.0.0 and < 2.8.5 and Apollo Router <1.52.1 are also impacted through their use of @apollo/query-panner. If @apollo/query-planner is asked to plan a sufficiently complex query, it may loop infinitely and never complete. This results in unbounded memory consumption and either a crash or out-of-memory (OOM) termination. This issue can be triggered if you have at least one non-@key field that can be resolved by multiple subgraphs. To identify these shared fields, the schema for each subgraph must be reviewed. The mechanism to identify shared fields varies based on the version of Federation your subgraphs are using. You can check if your subgraphs are using Federation 1 or Federation 2 by reviewing their schemas. Federation 2 subgraph schemas will contain a @link directive referencing the version of Federation being used while Federation 1 subgraphs will not. For example, in a Federation 2 subgraph, you will find a line like @link(url: \"https://specs.apollo.dev/federation/v2.0\"). If a similar @link directive is not present in your subgraph schema, it is using Federation 1. Note that a supergraph can contain a mix of Federation 1 and Federation 2 subgraphs. This issue results from the Apollo query planner attempting to use a Number exceeding Javascript\u2019s Number.MAX_VALUE in some cases. In Javascript, Number.MAX_VALUE is (2^1024 - 2^971). When the query planner receives an inbound graphql request, it breaks the query into pieces and for each piece, generates a list of potential execution steps to solve the piece. These candidates represent the steps that the query planner will take to satisfy the pieces of the larger query. As part of normal operations, the query planner requires and calculates the number of possible query plans for the total query. That is, it needs the product of the number of query plan candidates for each piece of the query. Under normal circumstances, after generating all query plan candidates and calculating the number of all permutations, the query planner moves on to stack rank candidates and prune less-than-optimal options. In particularly complex queries, especially those where fields can be solved through multiple subgraphs, this can cause the number of all query plan permutations to balloon. In worst-case scenarios, this can end up being a number larger than Number.MAX_VALUE. In Javascript, if Number.MAX_VALUE is exceeded, Javascript represents the value as \u201cinfinity\u201d. If the count of candidates is evaluated as infinity, the component of the query planner responsible for pruning less-than-optimal query plans does not actually prune candidates, causing the query planner to evaluate many orders of magnitude more query plan candidates than necessary. This issue has been addressed in @apollo/query-planner v2.8.5, @apollo/gateway v2.8.5, and Apollo Router v1.52.1. Users are advised to upgrade. This issue can be avoided by ensuring there are no fields resolvable from multiple subgraphs. If all subgraphs are using Federation 2, you can confirm that you are not impacted by ensuring that none of your subgraph schemas use the @shareable directive. If you are using Federation 1 subgraphs, you will need to validate that there are no fields resolvable by multiple subgraphs."
        }
      ],
      "problemTypes": [
        {
          "descriptions": [
            {
              "lang": "en",
              "type": "CWE",
              "cweId": "CWE-674",
              "description": "CWE-674: Uncontrolled Recursion"
            }
          ]
        }
      ],
      "providerMetadata": {
        "orgId": "a0819718-46f1-4df5-94e2-005712e83aaa",
        "shortName": "GitHub_M",
        "dateUpdated": "2024-08-27T17:20:05.375Z"
      }
    }
  },
  "cveMetadata": {
    "cveId": "CVE-2024-43414",
    "state": "PUBLISHED",
    "dateUpdated": "2024-08-27T17:58:38.192Z",
    "dateReserved": "2024-08-12T18:02:04.967Z",
    "assignerOrgId": "a0819718-46f1-4df5-94e2-005712e83aaa",
    "datePublished": "2024-08-27T17:20:05.375Z",
    "assignerShortName": "GitHub_M"
  },
  "dataVersion": "5.1"
}